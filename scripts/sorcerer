#! /usr/bin/env python3

import argparse
import gzip
import itertools
import lzma
import math
import os
import os.path
from multiprocessing import Pool
import sys

from astropy.io import fits
import numpy as np
from scipy.integrate import quad
from scipy.special import beta
from scipy.stats import norm

from sorcerer.iimg import ThresholdIntegral
from sorcerer.output import write_annotations, write_catalog, write_cutout
from sorcerer.postprocessing import merge
from sorcerer.search import searcher
from sorcerer.wcs_helper import WCSHelper


# Set the SNR array as a global object, to allow access
# from multiprocess workers, without pickling.
snr = None


def main():
    parser = argparse.ArgumentParser(
        description="""A source finding tool, for locating and characterising
                    sources in astronomical radio images.""",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(type=str, dest='file',
                        help='The path of FITS file to analyze.',)
    parser.add_argument('--grid', type=intplus, action='append', nargs=2,
                        required=True,
                        metavar=('grid', 'overlaps'),
                        help="""A grid/overlap pair. The grid size indicates
                             the size of the tiles used to search the image,
                             whilst the overlap value indicates how many times
                             to shift the grid. Ideally the overlap values
                             should divide the grid size. More overlaps are
                             better, but each overlap results in a complete
                             search of the image. A typical value might be
                             (12, 4), which indicates a grid size of 12 pixels,
                             with 4 overlapping grids, each offset by 3
                             pixels.""")
    parser.add_argument('--sensitivity', type=float, default=10,
                        help="""The sensitivity of the search, from which SNR
                             thresholds are calculated per grid size. Higher
                             numbers indicate a higher threshold is required
                             for a tile to be recognised as containing a
                             source.""")
    parser.add_argument('--exhaustive', type=int, default=5,
                        help="""An exhaustive tiling arrangement will be used
                             for grid sizes at or below this limit, resulting
                             in overlaps^2 searches. Above this limit, a
                             simplified tiling arrangement is used. This is
                             useful for very small sources that need to be
                             perfectly centred.""")
    parser.add_argument('--overlap-factor', type=float, default=0.2,
                        help="""For two tiles to be merged, their areas must
                             overlap by this factor.""")
    parser.add_argument('--clobber', action='store_true',
                        help="""The files <file>-sorcerer.{csv,ann} will be
                             created in the current directory. This flag
                             indicates whether to overwrite any existing files
                             of the same names.""")
    parser.add_argument('--workers', type=intplus, default=os.cpu_count(),
                        help="""By default, all cpu cores are used during
                             searching. The number of workers can be overrideen
                             here.""")
    parser.add_argument('--cutout', action='store_true',
                        help="""Optionally create a compressed cutout FITS file
                             (<file>-sorcerer.fits.{xz,gz}) with all background
                             pixels set as NaN.""")
    parser.add_argument('--cutout-margin', type=intzeroplus, default=5,
                        help="""Grow cutout regions by a number of pixels in all
                             directions.""")
    parser.add_argument('--cutout-compression', type=str, default='xz',
                        choices=['xz', 'gz', 'none'],
                        help="""Specify the file compression to be used on the
                             cutout FITS file. LZMA (xz) provides the highest
                             compression, whilst GZIP (gz) is faster is may be
                             more compatibile with existing tools.""")
    args = parser.parse_args()

    # Check the sanity of the grid/overlap pairs
    for grid, overlap in args.grid:
        if overlap > grid:
            print("ERROR: Invalid grid/overlap pair: ({}, {})".format(grid, overlap, file=sys.stderr))
            print("Overlaps cannot be greater than the grid size.", file=sys.stderr)
            sys.exit(1)

    # Open the FITS file.
    # For now, we assume to use the first section and that the image is 2D.
    hdulist = fits.open(args.file)
    img = np.squeeze(hdulist[0].data)

    # Open output files now, so that we can fail early if any permission
    # issues exist.
    prefix = os.path.splitext(os.path.basename(args.file))[0] + '-sorcerer'
    mode = 'w' if args.clobber else 'x'
    try:
        annotation_file = open(prefix + '.ann', mode)
        catalog_file = open(prefix + '.csv', mode)
        if args.cutout:
            if args.cutout_compression == 'xz':
                cutout_file = lzma.open(prefix + '.fits.xz', mode)
            elif args.cutout_compression == 'gz':
                cutout_file = gzip.open(prefix + '.fits.gz', mode)
            else:
                cutout_file = open(prefix + '.fits', mode)
    except FileExistsError as e:
        print("ERROR: Refusing to clobber file since --clobber is not set.", file=sys.stderr)
        print(e, file=sys.stderr)
        sys.exit(1)
    except OSError as e:
        print(e, file=sys.stderr)
        sys.exit(1)

    wcs_helper = WCSHelper(hdulist[0].header)
    print("Beam area: {:.1f}px".format(wcs_helper.beamarea_pix()))

    mean, sigma = background(img)

    # We assign snr to a global variable to avoid copying
    # when we spawn workers.
    global snr
    snr = np.nan_to_num((img - mean) / sigma)

    p = 1/10**args.sensitivity
    print("Beginning search for sources; false positive rate {:.2f}%".format(p * 100))

    # We sort the tiles to start searching the smallest tiles first, and meanwhile use
    # the other workers to search the larger grid sizes.
    map_args = [(grid, overlaps, threshold(p, wcs_helper.beamarea_pix(), grid**2), args.exhaustive)
                for grid, overlaps in sorted(args.grid)]
    if args.workers == 1:
        map_output = itertools.starmap(workerspawn, map_args)
    else:
        pool = Pool(args.workers)
        map_output = pool.starmap(workerspawn, map_args)

    boxes = [box for boxes in map_output for box in boxes]

    boxsets = merge(boxes, snr.shape, args.overlap_factor)

    # Output time
    if args.cutout:
        write_cutout(boxsets, hdulist[0], args.cutout_margin, cutout_file)
    write_catalog(boxsets, img-mean, wcs_helper, catalog_file)
    write_annotations(boxsets, wcs_helper, annotation_file)


def background(img):
    print("Calculating background statistics...")
    img = img[~np.isnan(img)]

    # Do 3 sigma clipping, 3 times.
    for _ in range(3):
        sigma = img.std()
        mean = img.mean()
        img = img[img < mean + 3 * sigma]

    mean, sigma = img.mean(), img.std()
    print("Background mean: ", mean, " standard deviation: ", sigma)
    return mean, sigma


def workerspawn(grid, overlaps, threshold, exhaustive_limit):
    print(" - grid {}; overlaps {}; threshold {:.2f}".format(grid, overlaps, threshold))
    iimg = ThresholdIntegral(snr, threshold)

    boxes = []

    if grid <= exhaustive_limit:
        for xoffset in range(overlaps):
            xorigin = xoffset * (grid // overlaps)
            for yoffset in range(overlaps):
                yorigin = yoffset * (grid // overlaps)
                boxes += searcher(iimg, grid, (xorigin, yorigin))
    else:
        for offset in range(overlaps):
            origin = offset * (grid // overlaps)
            boxes += searcher(iimg, grid, (origin, origin))

    return boxes


def threshold(p, beamarea, gridarea):
    def binomcdf(l, n, p):
        """This binomial CDF function is special as it handles l, n values
        as floats and interpolates values in between integer values with a small error."""
        def n_choose_i(n, i):
            return 1 / ((n + 1) * beta(n - i + 1, i + 1))

        def fn(i, n, p):
            return n_choose_i(n, i) * p**i * (1 - p)**(n - i)

        return quad(fn, 0, l, args=(n, p))[0]

    if gridarea < beamarea:
        print("WARNING: grid area ({}x{}) is less than beam area ({})".format(
            int(math.sqrt(gridarea)), int(math.sqrt(gridarea)),  beamarea),
            file=sys.stderr)

    samples = gridarea / beamarea
    half = samples / 2

    for i in np.arange(0, 20, 0.01):
        if binomcdf(half, samples, norm.cdf(i)) < p:
            return i

    raise Exception("Probability requires threshold value to be set too high.")


def intplus(val):
    """Type check to ensure grid values are strictly positive integers."""
    try:
        val = int(val)
    except ValueError:
        raise argparse.ArgumentTypeError("must be a positive integer")

    if val < 1:
        raise argparse.ArgumentTypeError("must be a positive integer")

    return val


def intzeroplus(val):
    """Type check to ensure grid values are strictly positive integers."""
    try:
        val = int(val)
    except ValueError:
        raise argparse.ArgumentTypeError("must be a positive integer")

    if val < 0:
        raise argparse.ArgumentTypeError("must be a positive integer")

    return val


if __name__ == '__main__':
    main()
